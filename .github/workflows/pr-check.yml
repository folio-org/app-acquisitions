name: Release PR check

#run-name: >-
#  Release PR Check • PR #${{ github.event.pull_request.number }}
#  — ${{ github.head_ref }} → ${{ github.base_ref }}

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository (e.g., folio-org/app-acquisitions)'
        required: true
        type: string
      pr_number:
        description: 'Pull request number'
        required: true
        type: string
      check_suite_id:
        description: 'Check suite ID'
        required: true
        type: string
      check_run_id:
        description: 'Check run ID to update'
        required: true
        type: string
      head_sha:
        description: 'Head commit SHA'
        required: true
        type: string
      head_branch:
        description: 'Head branch name'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
      validation_message: ${{ steps.validate.outputs.message }}
      target_branch: ${{ github.base_ref }}
      source_branch: ${{ github.head_ref }}
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_author: ${{ github.event.pull_request.user.login }}
    steps:
      - name: Get Release Configuration
        id: get-config
        uses: folio-org/kitfox-github/.github/actions/get-release-config@RANCHER-2323-test #TODO: Change to master when ready
        with:
          repo: ${{ github.repository }}
          branch: ${{ github.base_ref }}
          github_token: ${{ github.token }}

      - name: Validate PR Configuration
        id: validate
        env:
          TARGET_BRANCH: ${{ github.base_ref }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          CONFIG_EXISTS: ${{ steps.get-config.outputs.config_exists }}
          ENABLED: ${{ steps.get-config.outputs.enabled }}
          RELEASE_BRANCHES: ${{ steps.get-config.outputs.release_branches }}
          REQUIRED_LABELS: ${{ steps.get-config.outputs.pr_labels }}
        run: |
          echo "::notice::Validating PR for branch $TARGET_BRANCH"
          
          if [[ "$CONFIG_EXISTS" != "true" ]]; then
            echo "status=failed" >> "$GITHUB_OUTPUT"
            echo "message=Release configuration file not found" >> "$GITHUB_OUTPUT"
            echo "::error::Configuration file not found: .github/release-config.yml"
            exit 0
          fi
          
          if [[ "$ENABLED" != "true" ]]; then
            echo "status=skipped" >> "$GITHUB_OUTPUT"
            echo "message=Release scanning is disabled in configuration" >> "$GITHUB_OUTPUT"
            echo "::warning::Release scanning is disabled"
            exit 0
          fi
          
          BRANCH_EXISTS=$(echo "$RELEASE_BRANCHES" | jq -r ".[] | select(. == \"$TARGET_BRANCH\")" 2>/dev/null)
          if [ -z "$BRANCH_EXISTS" ]; then
            echo "status=failed" >> "$GITHUB_OUTPUT"
            echo "message=Target branch $TARGET_BRANCH is not configured for release scanning" >> "$GITHUB_OUTPUT"
            echo "::error::Branch $TARGET_BRANCH is not in release_branches configuration"
            exit 0
          fi
          
          if [ -n "$REQUIRED_LABELS" ]; then
            echo "::notice::Checking for required labels: $REQUIRED_LABELS"
            PR_LABELS_ARRAY=$(echo "$PR_LABELS" | jq -r '.[]' 2>/dev/null || echo "")
            MISSING_LABELS=""
            
            # Convert comma-separated labels to array
            IFS=',' read -ra LABEL_ARRAY <<< "$REQUIRED_LABELS"
            for label in "${LABEL_ARRAY[@]}"; do
              label=$(echo "$label" | xargs) # Trim whitespace
              if ! echo "$PR_LABELS_ARRAY" | grep -q "^$label$"; then
                MISSING_LABELS="${MISSING_LABELS}${MISSING_LABELS:+, }$label"
              fi
            done
            
            if [ -n "$MISSING_LABELS" ]; then
              echo "status=skipped" >> "$GITHUB_OUTPUT"
              echo "message=PR is missing required labels: $MISSING_LABELS" >> "$GITHUB_OUTPUT"
              echo "::notice::PR does not have required labels, skipping validation"
              exit 0
            fi
          fi
          
          echo "status=success" >> "$GITHUB_OUTPUT"
          echo "message=PR validation passed" >> "$GITHUB_OUTPUT"
          echo "::notice::PR validation successful"

  generate-descriptor:
    name: Generate Application Descriptor
    needs: validate
    if: needs.validate.outputs.validation_status != 'skipped' && needs.validate.outputs.validation_status != 'failed'
    runs-on: ubuntu-latest
    outputs:
      generated: ${{ steps.generate.outputs.generated }}
      descriptor_file: ${{ steps.generate.outputs.descriptor_file }}
      descriptor_file_name: ${{ steps.generate.outputs.descriptor_file_name }}
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Generate Application Descriptor
        id: generate
        uses: folio-org/kitfox-github/.github/actions/generate-application-descriptor@RANCHER-2323-test #TODO: Change to master when ready
        with:
          app_name: ${{ github.event.repository.name }}
          state_file: 'application-descriptor.json'
          upload_artifact: 'true'

  verify-application:
    name: Verify Application
    needs: [validate, generate-descriptor]
    if: needs.validate.outputs.validation_status != 'skipped' && needs.generate-descriptor.outputs.generated == 'true'
    uses: folio-org/kitfox-github/.github/workflows/verify-application.yml@RANCHER-2323-test #TODO: Change to master when ready
    with:
      app_name: ${{ github.event.repository.name }}
      app_descriptor_file: ${{ needs.generate-descriptor.outputs.descriptor_file }}
      app_descriptor_file_name: ${{ needs.generate-descriptor.outputs.descriptor_file_name }}
      rely_on_FAR: false
      skip_upload: true
    secrets: inherit

  notify:
    name: Send Notifications
    needs: [validate, generate-descriptor, verify-application]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    outputs:
      project_notification_status: ${{ steps.notify-project.outcome }}
      general_notification_status: ${{ steps.notify-general.outcome }}
    env:
      TITLE_TEXT: "${{ github.event.repository.name }} PR #${{ github.event.pull_request.number }} release check ${{ needs.verify-application.result == 'success' && 'passed' || (needs.validate.outputs.validation_status == 'skipped' && 'skipped' || 'failed') }}"
      TITLE_BLOCK: |
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "*${{ github.event.repository.name }} PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}> release check ${{ needs.verify-application.result == 'success' && 'passed' || (needs.validate.outputs.validation_status == 'skipped' && 'skipped' || 'failed') }} <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
          }
        }
      SUCCESS_ATTACHMENT: |
        {
          "color": "good",
          "fields": [
            {
              "title": "Pull Request",
              "value": "<${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>",
              "short": true
            },
            {
              "title": "Author",
              "value": "@${{ github.event.pull_request.user.login }}",
              "short": true
            },
            {
              "title": "Target Branch",
              "value": "${{ github.base_ref }}",
              "short": true
            },
            {
              "title": "Source Branch",
              "value": "${{ github.head_ref }}",
              "short": true
            }
          ],
          "footer": "Eureka CI/CD"
        }
      FAILURE_ATTACHMENT: |
        {
          "color": "danger",
          "fields": [
            {
              "title": "Pull Request",
              "value": "<${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>",
              "short": true
            },
            {
              "title": "Author",
              "value": "@${{ github.event.pull_request.user.login }}",
              "short": true
            },
            {
              "title": "Target Branch",
              "value": "${{ github.base_ref }}",
              "short": true
            },
            {
              "title": "Source Branch",
              "value": "${{ github.head_ref }}",
              "short": true
            },
            {
              "title": "Error",
              "value": "${{ needs.validate.outputs.validation_status == 'failed' && needs.validate.outputs.validation_message || (needs.generate-descriptor.outputs.generated != 'true' && 'Failed to generate application descriptor' || (needs.verify-application.outputs.validation_message || 'Application verification failed')) }}",
              "short": false
            }
          ],
          "footer": "Eureka CI/CD"
        }
      SKIPPED_ATTACHMENT: |
        {
          "color": "#808080",
          "fields": [
            {
              "title": "Pull Request",
              "value": "<${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>",
              "short": true
            },
            {
              "title": "Author",
              "value": "@${{ github.event.pull_request.user.login }}",
              "short": true
            },
            {
              "title": "Target Branch",
              "value": "${{ github.base_ref }}",
              "short": true
            },
            {
              "title": "Source Branch",
              "value": "${{ github.head_ref }}",
              "short": true
            },
            {
              "title": "Reason",
              "value": "${{ needs.validate.outputs.validation_message }}",
              "short": false
            }
          ],
          "footer": "Eureka CI/CD"
        }
    steps:
      - name: Send to Project Channel
        id: notify-project
        if: vars.SLACK_NOTIF_CHANNEL != '' && needs.validate.outputs.validation_status != 'skipped'
        continue-on-error: true
        env:
          CHANNEL: # ${{ vars.SLACK_NOTIF_CHANNEL }} TODO: uncomment when ready to send to project channel
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            {
              "channel": "${{ env.CHANNEL }}",
              "text": "${{ env.TITLE_TEXT }}",
              "blocks": [
                ${{ env.TITLE_BLOCK }}
              ],
              "attachments": [
                ${{ needs.verify-application.result == 'success' && env.SUCCESS_ATTACHMENT || (needs.validate.outputs.validation_status == 'skipped' && env.SKIPPED_ATTACHMENT || env.FAILURE_ATTACHMENT) }}
              ]
            }

      - name: Send to General Channel
        id: notify-general
        if: vars.GENERAL_SLACK_NOTIF_CHANNEL != '' && needs.validate.outputs.validation_status != 'skipped'
        continue-on-error: true
        env:
          CHANNEL: ${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            {
              "channel": "${{ env.CHANNEL }}",
              "text": "${{ env.TITLE_TEXT }}",
              "blocks": [
                ${{ env.TITLE_BLOCK }}
              ],
              "attachments": [
                ${{ needs.verify-application.result == 'success' && env.SUCCESS_ATTACHMENT || (needs.validate.outputs.validation_status == 'skipped' && env.SKIPPED_ATTACHMENT || env.FAILURE_ATTACHMENT) }}
              ]
            }

  summarize:
    name: Workflow Summary
    needs: [validate, generate-descriptor, verify-application, notify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        env:
          VALIDATION_STATUS: ${{ needs.validate.outputs.validation_status }}
          VALIDATION_MESSAGE: ${{ needs.validate.outputs.validation_message }}
          VERIFICATION_RESULT: ${{ needs.verify-application.result }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          TARGET_BRANCH: ${{ github.base_ref }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PROJECT_NOTIF_STATUS: ${{ needs.notify.outputs.project_notification_status || 'skipped' }}
          PROJECT_NOTIF_STATUS_ICON: >-
            ${{ 
              needs.notify.outputs.project_notification_status == 'success' && '✅'
              || needs.notify.outputs.project_notification_status == 'failure' && '⚠️'
              || 'ℹ️' 
            }}
          GENERAL_NOTIF_STATUS: ${{ needs.notify.outputs.general_notification_status || 'skipped' }}
          GENERAL_NOTIF_STATUS_ICON: >-
            ${{ 
              needs.notify.outputs.general_notification_status == 'success' && '✅'
              || needs.notify.outputs.general_notification_status == 'failure' && '⚠️'
              || 'ℹ️' 
            }}
        run: |
          {
            echo "## 🔍 Release PR Update Check Summary"
            echo ""
            echo "### 📋 Pull Request Details"
            echo "- **PR:** [#$PR_NUMBER](${{ github.event.pull_request.html_url }}) - $PR_TITLE"
            echo "- **Author:** @$PR_AUTHOR"
            echo "- **Source Branch:** \`$SOURCE_BRANCH\`"
            echo "- **Target Branch:** \`$TARGET_BRANCH\`"
            echo ""
            
            echo "### ✅ Validation Status"
            if [[ "$VALIDATION_STATUS" == "skipped" ]]; then
              echo "⏭️ **Status:** Skipped"
              echo "- $VALIDATION_MESSAGE"
            elif [[ "$VALIDATION_STATUS" == "failed" ]]; then
              echo "❌ **Status:** Failed"
              echo "- **Reason:** $VALIDATION_MESSAGE"
            elif [[ "$VALIDATION_STATUS" == "warning" ]]; then
              echo "⚠️ **Status:** Warning"
              echo "- **Message:** $VALIDATION_MESSAGE"
            else
              echo "✅ **Status:** Passed"
              echo "- Configuration validation successful"
            fi
            echo ""
            
            if [[ "$VALIDATION_STATUS" != "skipped" ]]; then
              echo "### 🔬 Application Verification"
              if [[ "$VERIFICATION_RESULT" == "success" ]]; then
                echo "✅ **Status:** Passed"
                echo "- Application changes verified successfully"
                echo "- Interface compatibility validated"
                echo "- All checks passed"
              elif [[ "$VERIFICATION_RESULT" == "failure" ]]; then
                echo "❌ **Status:** Failed"
                echo "- Application verification failed"
                echo "- Check the verification job logs for details"
              elif [[ "$VERIFICATION_RESULT" == "skipped" ]]; then
                echo "⏭️ **Status:** Skipped"
                echo "- Verification was skipped due to validation failure"
              else
                echo "⚠️ **Status:** Unknown"
                echo "- Unable to determine verification status"
              fi
              echo ""
            fi
            
            echo "### 📊 Overall Result"
            if [[ "$VALIDATION_STATUS" == "skipped" ]]; then
              echo "ℹ️ **Result:** Not Applicable"
              echo "- PR check is not required for this branch"
            elif [[ "$VALIDATION_STATUS" == "failed" || "$VERIFICATION_RESULT" == "failure" ]]; then
              echo "❌ **Result:** Failed"
              echo "- The PR does not meet the requirements"
              echo "- Please address the issues before merging"
            elif [[ "$VERIFICATION_RESULT" == "success" ]]; then
              echo "✅ **Result:** Passed"
              echo "- All checks completed successfully"
              echo "- PR is ready for review and merge"
            else
              echo "⚠️ **Result:** Incomplete"
              echo "- Some checks could not be completed"
            fi
            echo ""
            
            echo "### 📨 Notification Status"
            echo ""
            
            if [[ -n "${{ vars.SLACK_NOTIF_CHANNEL }}" ]]; then
              echo "$PROJECT_NOTIF_STATUS_ICON **Project Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): $PROJECT_NOTIF_STATUS"
            else
              echo "ℹ️ **Project Channel:** No Slack channel configured"
            fi
            
            if [[ -n "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}" ]]; then
              echo "$GENERAL_NOTIF_STATUS_ICON **General Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): $GENERAL_NOTIF_STATUS"
            else
              echo "ℹ️ **General Channel:** No Slack channel configured"
            fi
            
            echo ""
            
            echo "---"
            echo "*Generated by Release PR Update Check Workflow*"
          } >> $GITHUB_STEP_SUMMARY